php artisan make:livewire Counter
php artisan make:livewire HelloWorld

2. Implement the Logic in Component Classes
Counter Component

File: app/Http/Livewire/Counter.php

namespace App\Http\Livewire;

use Livewire\Component;

class Counter extends Component
{
    public $count = 0;

    public function increment()
    {
        $this->count++;
    }

    public function decrement()
    {
        $this->count--;
    }

    public function render()
    {
        return view('livewire.counter');
    }
}

Hello World Component

File: app/Http/Livewire/HelloWorld.php

namespace App\Http\Livewire;

use Livewire\Component;

class HelloWorld extends Component
{
    public $message = "Hello, World!";

    public function updateMessage($newMessage)
    {
        $this->message = $newMessage;
    }

    public function render()
    {
        return view('livewire.hello-world');
    }
}


3. Define the Views
Counter View

File: resources/views/livewire/counter.blade.php

<div>
    <h1>Counter: {{ $count }}</h1>
    <button wire:click="increment">+</button>
    <button wire:click="decrement">-</button>
</div>

Hello World View

File: resources/views/livewire/hello-world.blade.php

<div>
    <h1>{{ $message }}</h1>
    <input type="text" wire:model.lazy="message" placeholder="Update message">
</div>


4. Include the Components in a Parent View

Add the components to any Blade view:

<div>
    <h1>Livewire Demo</h1>

    <livewire:counter />

    <hr>

    <livewire:hello-world />
</div>


2. Define the Route

Add a route in the routes/web.php file to serve the new Blade view. For example:

use Illuminate\Support\Facades\Route;

Route::get('/newpage', function () {
    return view('newpage');
});


php artisan serve